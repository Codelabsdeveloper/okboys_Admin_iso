/*
 * File: index.jsx
 * Project: codelabs-boilderplate
 * Created Date: Sun Sep 25 2022 2:12:14 AM
 * Author: Mohammed Parveez <ahamed.parveez@gmail.com>
 * ------------------------------------
 *
 * Copyright (c) 2022 All rights reserved by Codelabs
 * ------------------------------------
 */

import AppConfig from '@App/appConfig/AppConfig';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import dynamic from 'next/dynamic';
import LoginLayout from '@Atoms/loginLayout';
import CampaignMockup from '@Assets/images/campaign-mockup.png';
import styles from '@Styles/Login.module.scss';
import Button from '@Atoms/button';
import { Row } from 'antd';
import AntdInput from '@Atoms/AntdInput';
import { name, number } from '@Helpers/FieldValidator';
import { registerBrandAction, loadBrandDetailsAction } from '@Store/brand-register/brandAction';
import { getFromLocalStorage } from '@Utils/StorageUtil';

const GMapSearch = dynamic(() => import('@Components/gMapSearch'), { ssr: false });

const Login = () => {
  const router = useRouter();
  const dispatch = useDispatch();

  const [values, setValues] = useState({
    brandName: '',
    address: '',
    area: '',
    city: '',
    // brandTurnover: '',
  });
  const [brandNameError, setBrandError] = useState(false);
  const [addressError, setAddressError] = useState(false);
  const [brandTurnoverError, setBrandTurnoverError] = useState(false);
  const [isNextBtnDisabled, setNextBtnDisabled] = useState(true);

  const isSubmitted = useSelector((state) => state.brandSlice.brandRegisterReponse);

  const { id } = getFromLocalStorage('AUTH') || {};

  useEffect(() => {
    dispatch(loadBrandDetailsAction(id));
  }, []);

  useEffect(() => {
    if (isSubmitted && isSubmitted?.id) {
      router.push('/register-brand/audience-goals');
    }
  }, [isSubmitted]);

  useEffect(() => {
    const allValues = Object.values(values);

    if (allValues.every((val) => val !== '')) {
      setNextBtnDisabled(false);
    } else {
      setNextBtnDisabled(true);
    }
  }, [values]);

  const onChangeInput = (event, type) => {
    setValues({ ...values, [type]: event.target.value });
  };

  const handleLogin = () => {
    const payload = {
      name: values?.brandName,
      turnover: values?.brandTurnover,
      address: values?.address,
      city: values?.city,
      area: values?.area,
      latLng: {
        lat: values?.latLng.lat,
        lng: values?.latLng.lng,
      },
    };

    // console.log('payload----', isNextBtnDisabled);
    if (!isNextBtnDisabled) dispatch(registerBrandAction(payload));
  };

  const handleBrandNameBlur = () => {
    values.brandName === '' && name(values.brandName) ? setBrandError(true) : setBrandError(false);
  };

  const handleAddressBlur = () => {
    values.address === '' && name(values.address) ? setAddressError(true) : setAddressError(false);
  };

  const handleBrandTurnoverBlur = () => {
    number(values.brandTurnover) ? setBrandTurnoverError(true) : setBrandTurnoverError(false);
  };

  const handleAddressChange = (data) => {
    setValues({ ...values, ...data });
  };

  return (
    <>
      <Head>
        <title>Shopr Smart - Erevu</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <LoginLayout
        title={AppConfig.getCMSMessage('register_brand.form1.title')}
        backgroundimg={CampaignMockup.src}
      >
        <Row gutter={2} className={styles.login}>
          <Row className={styles.formfield}>
            <AntdInput
              required
              placeholder="Brand Name"
              errorMgs={brandNameError ? '*Please enter a valid brand name' : ''}
              onChange={(e) => onChangeInput(e, 'brandName')}
              value={values?.brandName}
              onBlur={handleBrandNameBlur}
              label="Brand Name"
            />
          </Row>
          <Row>
            <GMapSearch
              handleAddressChange={handleAddressChange}
              values={values}
              handleAddressBlur={handleAddressBlur}
              onChangeInput={(e) => onChangeInput(e, 'address')}
              addressError={addressError}
              label="Location"
              placeholder="Location"
              errorMsg="*Please enter a valid Area"
            />
          </Row>

          <Row>
            <AntdInput required placeholder="Area" label="Area" value={values.area} disabled />
          </Row>
          <Row>
            <AntdInput required placeholder="City" label="City" value={values.city} disabled />
          </Row>
          <Row>
            <AntdInput
              // required
              label="Brand Turnover"
              placeholder="Brand Turnover"
              errorMgs={brandTurnoverError ? '*Please enter a valid brand turnover' : ''}
              onChange={(e) => onChangeInput(e, 'brandTurnover')}
              value={values.brandTurnover}
              onBlur={handleBrandTurnoverBlur}
            />
          </Row>
          <Row justify="end">
            <Button
              size="small"
              onClick={handleLogin}
              action="submit"
              // isProcessing={loginBtnLoadingValue}
              processingLabel=""
              disabled={isNextBtnDisabled}
            >
              {AppConfig.getCMSMessage('register_brand.form1.next_button')}
            </Button>
          </Row>
        </Row>
      </LoginLayout>
    </>
  );
};

export default Login;
